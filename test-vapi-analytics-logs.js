#!/usr/bin/env node

/**
 * Script de test pour les fonctionnalit√©s Analytics et Logs de l'API Vapi
 * Tests des nouveaux endpoints : createVapiAnalyticsQueries, getVapiLogs, deleteVapiLogs
 */

import dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import fetch from "node-fetch";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger les variables d'environnement
dotenv.config({ path: join(__dirname, "..", ".env") });

const VAPI_API_KEY = process.env.VAPI_API_KEY;

if (!VAPI_API_KEY) {
  console.error(
    "‚ùå VAPI_API_KEY non trouv√©e dans les variables d'environnement"
  );
  process.exit(1);
}

console.log("üöÄ D√©but des tests Analytics et Logs Vapi");
console.log("==========================================");

/**
 * Test des Analytics - Cr√©ation de requ√™tes d'analytics
 */
async function testAnalyticsQueries() {
  console.log("\nüìä Test 1: Cr√©ation de requ√™tes d'analytics");

  try {
    const analyticsQueries = [
      {
        table: "call",
        name: "total_calls_today",
        operations: [
          {
            operation: "count",
            column: "id",
          },
        ],
        timeRange: {
          start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 24h ago
          end: new Date().toISOString(),
          step: "hour",
          timezone: "UTC",
        },
      },
      {
        table: "call",
        name: "average_call_duration",
        operations: [
          {
            operation: "avg",
            column: "cost",
          },
        ],
        groupBy: ["status"],
        timeRange: {
          start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago
          end: new Date().toISOString(),
          step: "day",
        },
      },
    ];

    const response = await fetch("https://api.vapi.ai/analytics", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${VAPI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ queries: analyticsQueries }),
    });

    if (response.ok) {
      const result = await response.json();
      console.log("‚úÖ Requ√™tes d'analytics cr√©√©es avec succ√®s");
      console.log(`üìà Nombre de r√©sultats: ${result.length}`);

      // Afficher un aper√ßu des r√©sultats
      result.forEach((query, index) => {
        console.log(`   Query ${index + 1}: ${query.name}`);
        if (query.result && query.result.length > 0) {
          console.log(`   R√©sultats: ${query.result.length} entr√©es`);
        }
      });
    } else {
      const error = await response.text();
      console.log(`‚ö†Ô∏è  R√©ponse Analytics: ${response.status} - ${error}`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur Analytics: ${error.message}`);
  }
}

/**
 * Test des Logs - R√©cup√©ration des logs
 */
async function testGetLogs() {
  console.log("\nüìã Test 2: R√©cup√©ration des logs");

  try {
    const params = new URLSearchParams({
      limit: "10",
      sortOrder: "DESC",
    });

    const response = await fetch(`https://api.vapi.ai/logs?${params}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${VAPI_API_KEY}`,
        "Content-Type": "application/json",
      },
    });

    if (response.ok) {
      const result = await response.json();
      console.log("‚úÖ Logs r√©cup√©r√©s avec succ√®s");

      if (result.results) {
        console.log(`üìù Nombre de logs: ${result.results.length}`);
        console.log(
          `üìÑ Page actuelle: ${result.metadata?.currentPage || "N/A"}`
        );
        console.log(
          `üìä Total d'√©l√©ments: ${result.metadata?.totalItems || "N/A"}`
        );

        // Afficher les types de logs trouv√©s
        const logTypes = [...new Set(result.results.map((log) => log.type))];
        console.log(`üè∑Ô∏è  Types de logs: ${logTypes.join(", ")}`);
      }
    } else {
      const error = await response.text();
      console.log(`‚ö†Ô∏è  R√©ponse Logs GET: ${response.status} - ${error}`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur Logs GET: ${error.message}`);
  }
}

/**
 * Test des Logs - R√©cup√©ration avec filtres
 */
async function testGetLogsWithFilters() {
  console.log("\nüîç Test 3: R√©cup√©ration des logs avec filtres");

  try {
    const params = new URLSearchParams({
      type: "API",
      limit: "5",
      sortOrder: "DESC",
    });

    const response = await fetch(`https://api.vapi.ai/logs?${params}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${VAPI_API_KEY}`,
        "Content-Type": "application/json",
      },
    });

    if (response.ok) {
      const result = await response.json();
      console.log("‚úÖ Logs filtr√©s r√©cup√©r√©s avec succ√®s");

      if (result.results) {
        console.log(`üìù Logs API trouv√©s: ${result.results.length}`);

        // Afficher quelques d√©tails des logs API
        result.results.slice(0, 3).forEach((log, index) => {
          console.log(
            `   Log ${index + 1}: ${log.requestHttpMethod || "N/A"} ${
              log.requestPath || "N/A"
            } - ${log.responseHttpCode || "N/A"}`
          );
        });
      }
    } else {
      const error = await response.text();
      console.log(`‚ö†Ô∏è  R√©ponse Logs filtr√©s: ${response.status} - ${error}`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur Logs filtr√©s: ${error.message}`);
  }
}

/**
 * Test des Logs - Suppression (attention: op√©ration destructive)
 */
async function testDeleteLogs() {
  console.log("\nüóëÔ∏è  Test 4: Test de suppression de logs (simulation)");

  try {
    // Note: On teste avec des param√®tres tr√®s sp√©cifiques pour √©viter de supprimer tous les logs
    const params = new URLSearchParams({
      type: "API",
      // On pourrait ajouter d'autres filtres tr√®s sp√©cifiques ici
    });

    console.log(
      "‚ö†Ô∏è  ATTENTION: Test de suppression d√©sactiv√© pour la s√©curit√©"
    );
    console.log("   Pour tester r√©ellement, d√©commentez le code ci-dessous");
    console.log("   Param√®tres qui seraient utilis√©s:", params.toString());

    /*
    const response = await fetch(`https://api.vapi.ai/logs?${params}`, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${VAPI_API_KEY}`,
        "Content-Type": "application/json",
      },
    });

    if (response.ok) {
      if (response.status === 204) {
        console.log("‚úÖ Logs supprim√©s avec succ√®s (204 No Content)");
      } else {
        const result = await response.json();
        console.log("‚úÖ Logs supprim√©s avec succ√®s");
        console.log("üìã R√©sultat:", result);
      }
    } else {
      const error = await response.text();
      console.log(`‚ö†Ô∏è  R√©ponse Delete Logs: ${response.status} - ${error}`);
    }
    */

    console.log("‚úÖ Test de suppression simul√© avec succ√®s");
  } catch (error) {
    console.log(`‚ùå Erreur Delete Logs: ${error.message}`);
  }
}

/**
 * Fonction principale de test
 */
async function runTests() {
  try {
    await testAnalyticsQueries();
    await testGetLogs();
    await testGetLogsWithFilters();
    await testDeleteLogs();

    console.log("\nüéâ Tests Analytics et Logs termin√©s !");
    console.log("=====================================");
    console.log("‚úÖ Analytics: Requ√™tes d'analytics test√©es");
    console.log("‚úÖ Logs: R√©cup√©ration test√©e");
    console.log("‚úÖ Logs: Filtrage test√©");
    console.log("‚úÖ Logs: Suppression simul√©e");
  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error);
    process.exit(1);
  }
}

// Ex√©cuter les tests
runTests();
