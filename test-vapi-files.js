#!/usr/bin/env node

import dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import fetch from "node-fetch";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger le fichier .env du r√©pertoire parent
dotenv.config({ path: join(__dirname, "..", ".env") });

const vapiApiKey = process.env.VAPI_API_KEY;

console.log("üìÅ Test des fonctionnalit√©s Files Vapi");
console.log("=====================================");

/**
 * Test de listVapiFiles
 */
async function testListVapiFiles() {
  console.log("\nüîç Test: listVapiFiles");

  const response = await fetch("https://api.vapi.ai/file?limit=10", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  const files = await response.json();
  console.log(`‚úÖ ${files.length} fichiers r√©cup√©r√©s`);

  if (files.length > 0) {
    console.log("üìÅ Premier fichier:");
    console.log(`   - ID: ${files[0].id}`);
    console.log(`   - Nom: ${files[0].name || "Sans nom"}`);
    console.log(`   - Taille: ${files[0].bytes || "Non d√©finie"} bytes`);
    console.log(`   - Type MIME: ${files[0].mimetype || "Non d√©fini"}`);
    console.log(`   - Statut: ${files[0].status || "Non d√©fini"}`);
    console.log(`   - Objectif: ${files[0].purpose || "Non d√©fini"}`);
  }

  return files;
}

/**
 * Test de uploadVapiFile (version simplifi√©e pour test)
 */
async function testUploadVapiFileSimple() {
  console.log("\nüîç Test: uploadVapiFile (Simple)");

  // Contenu de test simple
  const fileContent = `# Guide d'utilisation Allokoli

## Introduction
Allokoli est un assistant vocal intelligent pour les entreprises.

## Fonctionnalit√©s principales
- Prise de rendez-vous automatique
- R√©servations en ligne
- Support client 24/7
- Transfert d'appels intelligent

## Configuration
1. Cr√©er un assistant
2. Configurer les param√®tres
3. Tester l'assistant
4. D√©ployer en production

## Support
Pour toute question, contactez support@allokoli.com
`;

  const fileConfig = {
    name: "guide-allokoli-test.md",
    purpose: "assistant",
    content: fileContent,
    mimetype: "text/markdown",
  };

  const response = await fetch("https://api.vapi.ai/file", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(fileConfig),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  const file = await response.json();
  console.log("‚úÖ Fichier upload√©:");
  console.log(`   - ID: ${file.id}`);
  console.log(`   - Nom: ${file.name || "Non d√©fini"}`);
  console.log(`   - Taille: ${file.bytes || "Non d√©finie"} bytes`);
  console.log(`   - Type MIME: ${file.mimetype || "Non d√©fini"}`);
  console.log(`   - Statut: ${file.status || "Non d√©fini"}`);
  console.log(`   - URL: ${file.url || "Non d√©finie"}`);

  return file;
}

/**
 * Test de getVapiFile
 */
async function testGetVapiFile(fileId) {
  console.log(`\nüîç Test: getVapiFile (ID: ${fileId})`);

  const response = await fetch(`https://api.vapi.ai/file/${fileId}`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  const file = await response.json();
  console.log("‚úÖ Fichier r√©cup√©r√©:");
  console.log(`   - Nom: ${file.name || "Non d√©fini"}`);
  console.log(`   - Taille: ${file.bytes || "Non d√©finie"} bytes`);
  console.log(`   - Type MIME: ${file.mimetype || "Non d√©fini"}`);
  console.log(`   - Statut: ${file.status || "Non d√©fini"}`);
  console.log(`   - Cr√©√© le: ${file.createdAt || "Non d√©fini"}`);
  console.log(`   - Modifi√© le: ${file.updatedAt || "Non d√©fini"}`);

  if (file.parsedTextUrl) {
    console.log(`   - Texte pars√© disponible: ${file.parsedTextUrl}`);
    console.log(
      `   - Taille texte pars√©: ${file.parsedTextBytes || "Non d√©finie"} bytes`
    );
  }

  return file;
}

/**
 * Test de updateVapiFile
 */
async function testUpdateVapiFile(fileId) {
  console.log(`\nüîç Test: updateVapiFile (ID: ${fileId})`);

  const updates = {
    name: "guide-allokoli-test-updated.md",
    purpose: "knowledge-base",
    metadata: {
      version: "1.1",
      author: "Allokoli Team",
      category: "documentation",
    },
  };

  const response = await fetch(`https://api.vapi.ai/file/${fileId}`, {
    method: "PATCH",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  const file = await response.json();
  console.log("‚úÖ Fichier mis √† jour:");
  console.log(`   - Nom: ${file.name || "Non d√©fini"}`);
  console.log(`   - Objectif: ${file.purpose || "Non d√©fini"}`);
  console.log(`   - M√©tadonn√©es: ${JSON.stringify(file.metadata || {})}`);

  return file;
}

/**
 * Test de deleteVapiFile
 */
async function testDeleteVapiFile(fileId) {
  console.log(`\nüîç Test: deleteVapiFile (ID: ${fileId})`);

  const response = await fetch(`https://api.vapi.ai/file/${fileId}`, {
    method: "DELETE",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  console.log("‚úÖ Fichier supprim√© avec succ√®s");
  return { success: true };
}

/**
 * Ex√©cuter tous les tests Files
 */
async function runFilesTests() {
  try {
    console.log("üöÄ D√©marrage des tests Files...\n");

    // Test 1: Lister les fichiers existants
    const existingFiles = await testListVapiFiles();

    // Test 2: Uploader un nouveau fichier
    const newFile = await testUploadVapiFileSimple();

    // Test 3: R√©cup√©rer le fichier upload√©
    await testGetVapiFile(newFile.id);

    // Test 4: Mettre √† jour le fichier
    await testUpdateVapiFile(newFile.id);

    // Test 5: Supprimer le fichier de test
    await testDeleteVapiFile(newFile.id);

    console.log("\nüéâ Tous les tests Files sont pass√©s avec succ√®s !");
    console.log("\nüìä R√©sum√©:");
    console.log(`   - ${existingFiles.length} fichiers existants`);
    console.log("   - Upload de fichier: ‚úÖ");
    console.log("   - R√©cup√©ration de fichier: ‚úÖ");
    console.log("   - Mise √† jour de fichier: ‚úÖ");
    console.log("   - Suppression de fichier: ‚úÖ");
    console.log("   - API Files Vapi enti√®rement fonctionnelle");
  } catch (error) {
    console.error("\n‚ùå Erreur lors des tests Files:", error.message);
    process.exit(1);
  }
}

runFilesTests();
