#!/usr/bin/env node

import dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import fetch from "node-fetch";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger le fichier .env du r√©pertoire parent
dotenv.config({ path: join(__dirname, "..", ".env") });

const vapiApiKey = process.env.VAPI_API_KEY;

console.log("üìÅ Test simplifi√© des fonctionnalit√©s Files Vapi");
console.log("===============================================");

/**
 * Test de listVapiFiles
 */
async function testListVapiFiles() {
  console.log("\nüîç Test: listVapiFiles");

  const response = await fetch("https://api.vapi.ai/file?limit=10", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  const files = await response.json();
  console.log(`‚úÖ ${files.length} fichiers r√©cup√©r√©s`);

  if (files.length > 0) {
    console.log("üìÅ Premier fichier:");
    console.log(`   - ID: ${files[0].id}`);
    console.log(`   - Nom: ${files[0].name || "Sans nom"}`);
    console.log(`   - Nom original: ${files[0].originalName || "Non d√©fini"}`);
    console.log(`   - Taille: ${files[0].bytes || "Non d√©finie"} bytes`);
    console.log(`   - Type MIME: ${files[0].mimetype || "Non d√©fini"}`);
    console.log(`   - Statut: ${files[0].status || "Non d√©fini"}`);
    console.log(`   - Objectif: ${files[0].purpose || "Non d√©fini"}`);
    console.log(`   - Cr√©√© le: ${files[0].createdAt || "Non d√©fini"}`);

    if (files[0].url) {
      console.log(`   - URL: ${files[0].url}`);
    }

    if (files[0].parsedTextUrl) {
      console.log(`   - Texte pars√© disponible: ${files[0].parsedTextUrl}`);
      console.log(
        `   - Taille texte pars√©: ${
          files[0].parsedTextBytes || "Non d√©finie"
        } bytes`
      );
    }
  }

  return files;
}

/**
 * Test de getVapiFile (si des fichiers existent)
 */
async function testGetVapiFile(fileId) {
  console.log(`\nüîç Test: getVapiFile (ID: ${fileId})`);

  const response = await fetch(`https://api.vapi.ai/file/${fileId}`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  const file = await response.json();
  console.log("‚úÖ Fichier r√©cup√©r√©:");
  console.log(`   - Nom: ${file.name || "Non d√©fini"}`);
  console.log(`   - Nom original: ${file.originalName || "Non d√©fini"}`);
  console.log(`   - Taille: ${file.bytes || "Non d√©finie"} bytes`);
  console.log(`   - Type MIME: ${file.mimetype || "Non d√©fini"}`);
  console.log(`   - Statut: ${file.status || "Non d√©fini"}`);
  console.log(`   - Objectif: ${file.purpose || "Non d√©fini"}`);
  console.log(`   - Cr√©√© le: ${file.createdAt || "Non d√©fini"}`);
  console.log(`   - Modifi√© le: ${file.updatedAt || "Non d√©fini"}`);

  if (file.url) {
    console.log(`   - URL: ${file.url}`);
  }

  if (file.parsedTextUrl) {
    console.log(`   - Texte pars√© disponible: ${file.parsedTextUrl}`);
    console.log(
      `   - Taille texte pars√©: ${file.parsedTextBytes || "Non d√©finie"} bytes`
    );
  }

  if (file.metadata && Object.keys(file.metadata).length > 0) {
    console.log(`   - M√©tadonn√©es: ${JSON.stringify(file.metadata)}`);
  }

  return file;
}

/**
 * Test de updateVapiFile (si des fichiers existent)
 */
async function testUpdateVapiFile(fileId) {
  console.log(`\nüîç Test: updateVapiFile (ID: ${fileId})`);

  const updates = {
    name: "fichier-test-allokoli-updated",
  };

  const response = await fetch(`https://api.vapi.ai/file/${fileId}`, {
    method: "PATCH",
    headers: {
      Authorization: `Bearer ${vapiApiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(updates),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Erreur Vapi: ${error}`);
  }

  const file = await response.json();
  console.log("‚úÖ Fichier mis √† jour:");
  console.log(`   - Nom: ${file.name || "Non d√©fini"}`);
  console.log(`   - Objectif: ${file.purpose || "Non d√©fini"}`);

  return file;
}

/**
 * Ex√©cuter les tests Files simplifi√©s
 */
async function runSimpleFilesTests() {
  try {
    console.log("üöÄ D√©marrage des tests Files simplifi√©s...\n");

    // Test 1: Lister les fichiers existants
    const existingFiles = await testListVapiFiles();

    if (existingFiles.length > 0) {
      // Test 2: R√©cup√©rer le premier fichier
      await testGetVapiFile(existingFiles[0].id);

      // Test 3: Mettre √† jour le premier fichier (puis le remettre comme avant)
      const originalFile = existingFiles[0];
      await testUpdateVapiFile(existingFiles[0].id);

      // Remettre les valeurs originales
      console.log("\nüîÑ Remise en √©tat du fichier...");
      const restoreUpdates = {
        name: originalFile.name,
      };

      await fetch(`https://api.vapi.ai/file/${existingFiles[0].id}`, {
        method: "PATCH",
        headers: {
          Authorization: `Bearer ${vapiApiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(restoreUpdates),
      });
      console.log("‚úÖ Fichier remis dans son √©tat original");
    }

    console.log(
      "\nüéâ Tous les tests Files simplifi√©s sont pass√©s avec succ√®s !"
    );
    console.log("\nüìä R√©sum√©:");
    console.log(`   - ${existingFiles.length} fichiers existants`);
    console.log("   - Listage de fichiers: ‚úÖ");

    if (existingFiles.length > 0) {
      console.log("   - R√©cup√©ration de fichier: ‚úÖ");
      console.log("   - Mise √† jour de fichier: ‚úÖ");
    } else {
      console.log("   - Aucun fichier existant pour tester get/update");
    }

    console.log("   - API Files Vapi fonctionnelle (lecture/mise √† jour)");
    console.log(
      "\nüí° Note: L'upload de fichiers n√©cessite un vrai fichier multipart."
    );
    console.log(
      "   Pour tester l'upload, utilisez le dashboard Vapi ou curl avec -F file=@fichier"
    );
  } catch (error) {
    console.error("\n‚ùå Erreur lors des tests Files:", error.message);
    process.exit(1);
  }
}

runSimpleFilesTests();
